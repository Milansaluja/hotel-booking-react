
<!-- USESTATE PROTOCOLS ................ -->
 Here are the key protocols and requirements of using useState() in React:

Protocols & Requirements for useState()
Immutable Updates

Never mutate state directly (e.g., state.push() or state[index] = value).

Instead, create a new array or object using spread syntax or methods like .map(), .filter(), .concat(), etc.

✅ Example:
setState([...state, newValue]); // For arrays
setState({...state, key: newValue}); // For objects
Always Use the Setter Function

React's state updates must be triggered by the setter function (setState) provided by useState().

Direct modification of state variables won’t trigger a re-render.

✅ Example:
const [count, setCount] = useState(0);
setCount(count + 1); // Correct way
State Updates are Asynchronous

React batches state updates for performance. Never assume state is updated immediately.

Always rely on the previous state if you're updating based on it.

✅ Example:

setState(prevState => prevState + 1); // Safely updates state based on the previous value
Primitive vs. Complex State

For primitive data types (strings, numbers, booleans), direct updating with setState(value) is fine.❤❤❤❤❤❤❤❤

For complex data types (arrays, objects), always create a new copy before updating.❤❤❤❤❤

✅ Example for arrays:

setBookingStorage(prev => [...prev, newEntry]);
✅ Example for objects:

setFormData(prev => ({ ...prev, [name]: value }));
Avoid State Mutation Using Functions

Don’t use .push(), .splice(), or direct index assignment for arrays.

Instead, use .map(), .filter(), or spread syntax to create new arrays.

If state is directly derived from props, avoid modifying it directly. Use a callback or derived state when necessary.


<!--  arrow function wrt state -->
Which Version Should You Use?
Scenario	Syntax
Single operation (e.g., just spreading an array)	prev => [...prev, Formdata] (cleaner) .......no need of return.
Multiple operations (e.g., console.log + state update)	prev => { ...prev ; console.log(" ") return ...; } (requires {} and return) which need more than one values